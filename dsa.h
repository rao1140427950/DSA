#ifndef _DSA_H_
#define _DSA_H_

#include "sha1.h"

#define SCALE ((uint64)4294967296)

#define MAX_STR_LEN 310
#define P "p=102865584259843077175583195011997798900482038016705824136288380475734860009055428071534495956844807748416572686838253895244634687898659646424515259679129905513743899853971066468883670407530107234961085482225328667572772611162756643027105617873895021996158552984843708233824989792811721408577351617080369547993"
#define Q "q=734415599462729831694143846331445277609193755927"
#define G "g=63615006880335642768473038477258757436464860136916565207798584167060621564899979263408565137993978149206751054438974059615983337126379668370747907507911540381031959187353048278562320341063050939775344313271013777131358834376209974551749493023310606751625276738876397935042130121966817767949476523717161640453"

void str_to_32xuint32(string input, uint32 output[32]);
void mod_uint32(uint32 rst[32], uint32 a[64], uint32 n[32]);  // rst = a mod n
void multiply_32xuint32_modn(uint32 rst[32], uint32 a[32], uint32 b[32], uint32 n[32]);  // rst = (a * b) mod n
void add_64xuint32(uint32 rst[64], uint32 a[64], uint32 b[64]);  // rst = a + b (a > b)
void subtract_64xuint32(uint32 rst[64], uint32 a[64], uint32 b[64]);  // rst = a - b (a > b)
bool compare_64xuint32(uint32 a[64], uint32 b[64]);  // return (a >= b)
void power_mod_32xuint32(uint32 rst[32], uint32 c[32], uint32 e[32], uint32 n[32]);  // rst = (c^e) mod n

#endif // !_DSA_H_
